user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  /var/log/nginx/access.log  main;
    access_log  off;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    ignore_invalid_headers on;
    client_header_timeout 240;
    client_body_timeout 240;
    send_timeout 240;
    client_body_buffer_size 2m;
    client_header_buffer_size 10k;
    client_max_body_size 100m;
    large_client_header_buffers 8 1024k;

    proxy_buffer_size   128k;
    proxy_buffers   4 256k;
    proxy_busy_buffers_size   256k;

    # Include CORS support
    # Define allowed origins
    map $http_origin $origin_allowed {
        default 0;

        http://dbos-app 1;
        http://dbos-app-auth 1;
    }

    map $origin_allowed $origin {
        default "";
        1 $http_origin;
    }

    server {
        server_name _ dbos-app;
        listen 80;
        listen [::]:80;

        # needed since we use a variable in the address (see below)
        resolver 127.0.0.11 valid=30s;

        charset utf-8;

        # General configuration
        index index.html index.htm;
        root /usr/share/nginx/html;

        error_page 404 /404.html;

        error_page 500 502 503 504 /50x.html;

        #Hide server info
        server_tokens off;

        location = /50x.html {
            root /usr/share/nginx/html;
        }

        location = /robots.txt {
            root /usr/share/nginx/html;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        location ~ /\.ht {
            deny  all;
        }

        # The Cloud Metadata Attack attempts to abuse a misconfigured NGINX server
        # in order to access the instance metadata maintained by cloud service providers
        # such as AWS, GCP and Azure. All of these providers provide metadata via an internal
        # unroutable IP address ‘169.254.169.254’
        # this can be exposed by incorrectly configured NGINX servers and accessed by using
        # this IP address in the Host header field.
        location = /latest/meta-data/ {
            deny all;
        }

        location = /v1/api/sms/vodafone/dlr {

            # Allow booting when service is down
            set $ekep_backend_upstream ekep-backend:3000;

            proxy_pass              http://$ekep_backend_upstream;
            proxy_redirect          off;

        }

        #
        # Allow email verification without authentication
	    #

        location = /v1/api/ekep/profile/verify-email {
            include snippets/ekep-backend-proxy-public-location.conf;
        }
	    #
        # Allow external app link consume without authentication
	    #
        location = /v1/api/ekep/external-app-link-token/consume {
            include snippets/ekep-backend-proxy-public-location.conf;
        }

        location = /v1/api/ekep/profile {
	    # Separate entry in order to allow outgoing Authorization header
	    # containing the id token.

            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        Host $http_host;
            proxy_set_header        X-Forwarded-Proto $scheme;
            proxy_connect_timeout   240;
            proxy_send_timeout      240;
            proxy_read_timeout      240;

            # Allow booting when service is down
            set $oauth2_proxy_upstream oauth2-proxy:4180;

            proxy_pass              http://$oauth2_proxy_upstream;
            proxy_redirect          off;
        }


        #
        # Allow document validation by uuid without authentication
	    #
        location /v1/api/ekep/documents {
            include snippets/ekep-backend-proxy-public-location.conf;
        }

	    #
        # Allow download evidences by uuid without authentication
	    #
        location /v1/api/ekep/cases-evidences {
            include snippets/ekep-backend-proxy-public-location.conf;
        }

        #
        # Allow download evidences costs by uuid without authentication
	    #
        location /v1/api/ekep/cases-evidence-costs {
            include snippets/ekep-backend-proxy-public-location.conf;
        }

        #
        # Allow access to news public api without authentication
	    #
        location /v1/api/ekep/news/published/public {
            include snippets/ekep-backend-proxy-public-location.conf;
        }
        #
        # Allow access to news attachments public api without authentication
	    #
        location /v1/api/ekep/news-attachments/public {
            include snippets/ekep-backend-proxy-public-location.conf;
        }
        #
        # Allow access to news categories api without authentication
	    #
        location /v1/api/ekep/news-categories/public {
            include snippets/ekep-backend-proxy-public-location.conf;
        }

        #
        # Allow access to case process month statistics public api without authentication
	    #
        #location /v1/api/ekep/case-process-month-statistics/public {
        #    include snippets/ekep-backend-proxy-public-location.conf;
        #}

        location /v1/api/ked {
            include snippets/ekep-backend-proxy-public-location.conf;
        }

        location /oauth2 {

            include snippets/cors.conf;

            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        Host $http_host;
            proxy_set_header        X-Forwarded-Proto $scheme;
            proxy_connect_timeout   240;
            proxy_send_timeout      240;
            proxy_read_timeout      240;

            # Hide Authorization header
            proxy_hide_header Authorization;

            # Allow booting when service is down
            # trick to avoid circular dependency
            # nginx will boot even if the oauth2-proxy is down
            set $oauth2_proxy_upstream oauth2-proxy:4180;

            proxy_pass              http://$oauth2_proxy_upstream;
            proxy_redirect          off;
        }

        location /v1 {

            include snippets/cors.conf;

            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        Host $http_host;
            proxy_set_header        X-Forwarded-Proto $scheme;
            proxy_connect_timeout   240;
            proxy_send_timeout      240;
            proxy_read_timeout      240;

            # Hide Authorization header
            proxy_hide_header Authorization;

            # Allow booting when service is down
            # trick to avoid circular dependency
            # nginx will boot even if the oauth2-proxy is down
            set $oauth2_proxy_upstream oauth2-proxy:4180;

            proxy_pass              http://$oauth2_proxy_upstream;
            proxy_redirect          off;
        }


        location /ws/socket.io {

            include snippets/cors.conf;

            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;

            # In production, we need to have a rule to have sticky sessions
            #proxy_pass http://backend_nodes;
            set $oauth2_proxy_upstream oauth2-proxy:4180;

            proxy_pass  http://$oauth2_proxy_upstream;

            # enable WebSockets
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        location / {
            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        Host $http_host;
            proxy_set_header        X-Forwarded-Proto $scheme;
            proxy_connect_timeout   240;
            proxy_send_timeout      240;
            proxy_read_timeout      240;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";

            # Allow booting when service is down
            set $ekep_frontend_upstream ekep-frontend:3000;

            proxy_pass              http://$ekep_frontend_upstream;
            proxy_redirect          off;
        }

    }

    server {
        server_name auth.processes.test;
        listen 80;
        listen [::]:80;

        # needed since we use a variable in the address (see below)
        resolver 127.0.0.11 valid=30s;

        charset utf-8;

        # General configuration
        index index.html index.htm;
        root /usr/share/nginx/html;

        error_page 404 /404.html;

        error_page 500 502 503 504 /50x.html;

        location = /50x.html {
            root /usr/share/nginx/html;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        location ~ /\.ht {
            deny  all;
        }

        location = /robots.txt {
            root /usr/share/nginx/html;
        }

        location / {
            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        Host $http_host;
            proxy_set_header        X-Forwarded-Proto $scheme;
            proxy_connect_timeout   240;
            proxy_send_timeout      240;
            proxy_read_timeout      240;

            # Allow booting when service is down
            set $ekep_keycloak_upstream keycloak:8080;

            proxy_pass              http://$ekep_keycloak_upstream;
            proxy_redirect          off;
        }

    }

    server {
        server_name camunda.processes.test;
        listen 80;
        listen [::]:80;

        # needed since we use a variable in the address (see below)
        resolver 127.0.0.11 valid=30s;

        charset utf-8;

        # General configuration
        index index.html index.htm;
        root /usr/share/nginx/html;

        error_page 404 /404.html;

        error_page 500 502 503 504 /50x.html;

        location = /50x.html {
            root /usr/share/nginx/html;
        }

        location = /robots.txt {
            root /usr/share/nginx/html;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        location ~ /\.ht {
            deny  all;
        }

        # until we have some other backend services to expose
        location / {
            return 301 /camunda;
        }

        location /camunda {
            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        Host $http_host;
            proxy_set_header        X-Forwarded-Proto $scheme;
            proxy_connect_timeout   240;
            proxy_send_timeout      240;
            proxy_read_timeout      240;

            # Allow booting when service is down
            set $ekep_bpmn_upstream ekep-bpmn:8080;

            proxy_pass              http://$ekep_bpmn_upstream;
            proxy_redirect          off;
        }

    }


    server {
        server_name manage.processes.test;
        listen 80;
        listen [::]:80;

        # needed since we use a variable in the address (see below)
        resolver 127.0.0.11 valid=30s;

        charset utf-8;

        # General configuration
        index index.html index.htm;
        root /usr/share/nginx/html;

        error_page 404 /404.html;

        error_page 500 502 503 504 /50x.html;

        #Hide server info
        server_tokens off;
        location = /50x.html {
            root /usr/share/nginx/html;
        }

        location = /robots.txt {
            root /usr/share/nginx/html;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        location ~ /\.ht {
            deny  all;
        }

        # The Cloud Metadata Attack attempts to abuse a misconfigured NGINX server
        # in order to access the instance metadata maintained by cloud service providers
        # such as AWS, GCP and Azure. All of these providers provide metadata via an internal
        # unroutable IP address ‘169.254.169.254’
        # this can be exposed by incorrectly configured NGINX servers and accessed by using
        # this IP address in the Host header field.
        location = /latest/meta-data/ {
            deny all;
        }

        location = /v1/api/ekep/profile {
	    # Separate entry in order to allow outgoing Authorization header
	    # containing the id token.

            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        Host $http_host;
            proxy_set_header        X-Forwarded-Proto $scheme;
            proxy_connect_timeout   240;
            proxy_send_timeout      240;
            proxy_read_timeout      240;

            # Allow booting when service is down
            set $oauth2_proxy_upstream ekep-admin-oauth2-proxy:4180;

            proxy_pass              http://$oauth2_proxy_upstream;
            proxy_redirect          off;
        }

        location /v1 {

            include snippets/cors.conf;

            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        Host $http_host;
            proxy_set_header        X-Forwarded-Proto $scheme;
            proxy_connect_timeout   240;
            proxy_send_timeout      240;
            proxy_read_timeout      240;

            # Hide Authorization header
            proxy_hide_header Authorization;

            # Allow booting when service is down
            # trick to avoid circular dependency
            # nginx will boot even if the oauth2-proxy is down
            set $oauth2_proxy_upstream ekep-admin-oauth2-proxy:4180;

            proxy_pass              http://$oauth2_proxy_upstream;
            proxy_redirect          off;

        }

        location /oauth2 {

            include snippets/cors.conf;

            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        Host $http_host;
            proxy_set_header        X-Forwarded-Proto $scheme;
            proxy_connect_timeout   240;
            proxy_send_timeout      240;
            proxy_read_timeout      240;

            # Hide Authorization header
            proxy_hide_header Authorization;

            # Allow booting when service is down
            # trick to avoid circular dependency
            # nginx will boot even if the oauth2-proxy is down
            set $oauth2_proxy_upstream ekep-admin-oauth2-proxy:4180;

            proxy_pass              http://$oauth2_proxy_upstream;
            proxy_redirect          off;

        }

        location / {
            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        Host $http_host;
            proxy_set_header        X-Forwarded-Proto $scheme;
            proxy_connect_timeout   240;
            proxy_send_timeout      240;
            proxy_read_timeout      240;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";

            # Allow booting when service is down
            set $ekep_admin_frontend_upstream ekep-admin-frontend:3000;

            proxy_pass              http://$ekep_admin_frontend_upstream;
            proxy_redirect          off;
        }

    }

    server {
        server_name my.processes.test;
        listen 80;
        listen [::]:80;

        # needed since we use a variable in the address (see below)
        resolver 127.0.0.11 valid=30s;

        charset utf-8;

        # General configuration
        index index.html index.htm;
        root /usr/share/nginx/html;

        error_page 404 /404.html;

        error_page 500 502 503 504 /50x.html;

        #Hide server info
        server_tokens off;

        location = /50x.html {
            root /usr/share/nginx/html;
        }

        location = /robots.txt {
            root /usr/share/nginx/html;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        location ~ /\.ht {
            deny  all;
        }

        # The Cloud Metadata Attack attempts to abuse a misconfigured NGINX server
        # in order to access the instance metadata maintained by cloud service providers
        # such as AWS, GCP and Azure. All of these providers provide metadata via an internal
        # unroutable IP address ‘169.254.169.254’
        # this can be exposed by incorrectly configured NGINX servers and accessed by using
        # this IP address in the Host header field.
        location = /latest/meta-data/ {
            deny all;
        }

        location = /v1/api/sms/vodafone/dlr {
            include snippets/ekep-backend-proxy-public-location.conf;
        }

        location = /v1/api/myekep/profile/verify-email {
            include snippets/ekep-backend-proxy-public-location.conf;
        }

        location = /v1/api/myekep/profile {

            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        Host $http_host;
            proxy_set_header        X-Forwarded-Proto $scheme;
            proxy_connect_timeout   240;
            proxy_send_timeout      240;
            proxy_read_timeout      240;

            # Allow booting when service is down
            set $myekep_oauth2_proxy_upstream myekep-oauth2-proxy:4180;

            proxy_pass              http://$myekep_oauth2_proxy_upstream;
            proxy_redirect          off;

        }

	#
        # Allow document validation by uuid without authentication
	#
        location /v1/api/myekep/documents {
            include snippets/ekep-backend-proxy-public-location.conf;
        }


        #
        # Allow download evidences by uuid without authentication
        #
        location /v1/api/myekep/cases-evidences {
            include snippets/ekep-backend-proxy-public-location.conf;
        }

        #
        # Allow access to EUGO nace indices
        #
        location /v1/api/myekep/eugo/nace {
            include snippets/ekep-backend-proxy-public-location.conf;
        }

        #
        # Allow access to EUGO process descriptions
        #
        location /v1/api/myekep/eugo/processes {
            include snippets/ekep-backend-proxy-public-location.conf;
        }


        location /v1 {

            include snippets/cors.conf;

            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        Host $http_host;
            proxy_set_header        X-Forwarded-Proto $scheme;
            proxy_connect_timeout   240;
            proxy_send_timeout      240;
            proxy_read_timeout      240;

            # Hide Authorization header
            proxy_hide_header Authorization;

            # Allow booting when service is down
            # trick to avoid circular dependency
            # nginx will boot even if the oauth2-proxy is down
            set $myekep_oauth2_proxy_upstream myekep-oauth2-proxy:4180;

            proxy_pass              http://$myekep_oauth2_proxy_upstream;
            proxy_redirect          off;

        }

        location /oauth2 {

            include snippets/cors.conf;

            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        Host $http_host;
            proxy_set_header        X-Forwarded-Proto $scheme;
            proxy_connect_timeout   240;
            proxy_send_timeout      240;
            proxy_read_timeout      240;

            # Hide Authorization header
            proxy_hide_header Authorization;

            # Allow booting when service is down
            # trick to avoid circular dependency
            # nginx will boot even if the oauth2-proxy is down
            set $myekep_oauth2_proxy_upstream myekep-oauth2-proxy:4180;

            proxy_pass              http://$myekep_oauth2_proxy_upstream;
            proxy_redirect          off;

        }


        location / {
            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        Host $http_host;
            proxy_set_header        X-Forwarded-Proto $scheme;
            proxy_connect_timeout   240;
            proxy_send_timeout      240;
            proxy_read_timeout      240;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";

            # Allow booting when service is down
            set $myekep_frontend_upstream myekep-frontend:3000;

            proxy_pass              http://$myekep_frontend_upstream;
            proxy_redirect          off;
        }

    }

    server {
        server_name internal-api.processes.test;
        listen 80;
        listen [::]:80;

        # needed since we use a variable in the address (see below)
        resolver 127.0.0.11 valid=30s;

        charset utf-8;

        # General configuration
        index index.html index.htm;
        root /usr/share/nginx/html;

        error_page 404 /404.html;

        error_page 500 502 503 504 /50x.html;

        location = /50x.html {
            root /usr/share/nginx/html;
        }

        location = /robots.txt {
            root /usr/share/nginx/html;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        location ~ /\.ht {
            deny  all;
        }

        location / {
            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        Host $http_host;
            proxy_set_header        X-Forwarded-Proto $scheme;
            proxy_connect_timeout   240;
            proxy_send_timeout      240;
            proxy_read_timeout      240;

	    # Allow booting when service is down
            set $ekep_backend_upstream ekep-backend:3000;

            proxy_pass              http://$ekep_backend_upstream;
            proxy_redirect          off;
        }

    }

}

